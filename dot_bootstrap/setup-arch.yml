---
- name: Machine setup by D7OM
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  vars:
    flyctl_version: "0.1.130"
    pulumi_version: "v3.94.2"
    brew_packages:
      - lazygit
      - eza
      - trash-cli
      - tldr
      - thefuck
      - python
      - pipx
      - bat
      - zsh-syntax-highlighting
      - gum
      - watchman
      - golang
      - figlet
    aur_packages:
      - pika-backup
      - git-delta
      - mission-center
      - timeshift
      - grub-btrfs
      - timeshift-autosnap
      - sesh-bin
      - github-cli
      - ttf-jetbrains-mono-nerd
      - scrcpy
      - android-tools
      - appimagelauncher
      - ttf-amiri
      - hyprshot-git
      - keyd
      - clipse
      - base-devel
    install_homebrew_if_missing: true
    upgrade_homebrew_packages: true

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Install yay
      block:
        - name: Check if yay is installed
          ansible.builtin.command: which yay
          register: yay_check
          ignore_errors: true
          changed_when: false

        - name: Clean up old yay directory if exists
          ansible.builtin.file:
            path: /tmp/yay
            state: absent
          when: yay_check.rc != 0
          become: false

        - name: Clone yay repo
          git:
            repo: https://aur.archlinux.org/yay.git
            dest: /tmp/yay
          when: yay_check.rc != 0
          become: false

        - name: Build and install yay
          command:
            cmd: makepkg -si --noconfirm
            chdir: /tmp/yay
          when: yay_check.rc != 0
          become: false

    - name: Install AUR packages
      become: false
      ansible.builtin.command: yay -S --noconfirm --needed {{ item }}
      loop: "{{ aur_packages }}"
      register: yay_result
      changed_when: yay_result.rc == 0 and not 'nothing to do' in yay_result.stderr

    - name: Install required packages for Arch (pacman)
      community.general.pacman:
        name:
          - git
          - btop
          - neovim
          - firefox
          - gnome-tweaks
          - vorta
          - ripgrep
          - zsh
          - fzf
          - tmux
          - kitty
          - openssl
          - gdbm
          - libnsl
          - luarocks
          - wl-clipboard
          - fd
          - base-devel
          - autoconf
          - docker
          - docker-compose
        state: present

    - name: Check if root filesystem is BTRFS
      ansible.builtin.command: findmnt -no FSTYPE /
      register: root_fstype
      changed_when: false

    - name: Configure grub-btrfsd service
      when: root_fstype.stdout == "btrfs"
      copy:
        dest: /etc/systemd/system/grub-btrfsd.service
        content: |
          [Unit]
          Description=Regenerate grub-btrfs.cfg

          [Service]
          Type=simple
          LogLevelMax=notice
          Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin"
          EnvironmentFile=/etc/default/grub-btrfs/config
          ExecStart=/usr/bin/grub-btrfsd --syslog --timeshift-auto

          [Install]
          WantedBy=multi-user.target

    - name: Configure grub-btrfs
      when: root_fstype.stdout == "btrfs"
      blockinfile:
        path: /etc/default/grub-btrfs/config
        create: yes
        block: |
          GRUB_BTRFS_SNAPSHOT_KERNEL="/boot/vmlinuz-linux"
          GRUB_BTRFS_SNAPSHOT_INITRAMFS="/boot/initramfs-linux.img"
          GRUB_BTRFS_LIMIT="50"
          GRUB_BTRFS_SHOW_SNAPSHOTS_FOUND="true"
          GRUB_BTRFS_SHOW_TOTAL_SNAPSHOTS_FOUND="true"
          GRUB_BTRFS_SUBMENUNAME="Snapshots"
          GRUB_BTRFS_TITLE_FORMAT="timeshift-auto-snap"

    - name: Configure timeshift-autosnap
      when: root_fstype.stdout == "btrfs"
      lineinfile:
        path: /etc/timeshift-autosnap.conf
        regexp: "^updateGrub="
        line: "updateGrub=false"
        create: yes

    - name: Reload systemd daemon
      when: root_fstype.stdout == "btrfs"
      systemd:
        daemon_reload: yes

    - name: Enable and start required services
      when: root_fstype.stdout == "btrfs"
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - grub-btrfsd

    - name: Check if Homebrew is already installed
      ansible.builtin.stat:
        path: /home/linuxbrew/.linuxbrew/bin/brew
      register: homebrew_exists

    - name: Install Homebrew
      block:
        - name: Download Homebrew install script
          get_url:
            url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
            dest: /tmp/brew_install.sh
            mode: "0755"
          become: false

        - name: Install Homebrew
          command: /bin/bash /tmp/brew_install.sh
          become: false
          when: not homebrew_exists.stat.exists

        - name: Add Homebrew to PATH in .zshrc
          ansible.builtin.lineinfile:
            path: "/home/{{ remote_regular_user }}/.zshrc"
            line: 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
            create: yes
          become: false

    - name: Upgrade Homebrew packages
      command: /home/linuxbrew/.linuxbrew/bin/brew upgrade
      become: false
      when: homebrew_exists.stat.exists and upgrade_homebrew_packages

    - name: Install packages via Homebrew
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ brew_packages }}"
      become: false

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        groups: docker
        append: true

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: Check if ~/.config/nvim exists
      stat:
        path: "/home/{{ remote_regular_user }}/.config/nvim"
      register: nvim_config_check

    - name: Ask if the user wants to install D7OM's Neovim config
      pause:
        prompt: "Do you want to install D7OM's Neovim config? (yes/no)"
      register: confirm_install
      when: nvim_config_check.stat.exists

    - name: Backup existing nvim config if confirmed
      command: mv "/home/{{ remote_regular_user }}/.config/nvim" "/home/{{ remote_regular_user }}/.config/nvim.bak"
      when:
        - nvim_config_check.stat.exists
        - confirm_install.user_input == "yes"

    - name: Clone Neovim config from GitHub
      ansible.builtin.git:
        repo: "https://github.com/d7omdev/nvim.git"
        dest: "/home/{{ remote_regular_user }}/.config/nvim"
        clone: yes
        update: yes
      become: false
      when:
        - not nvim_config_check.stat.exists or confirm_install.user_input == "yes"
      ignore_errors: true
      register: nvim_clone

    - name: Display warning if Neovim config clone failed
      ansible.builtin.debug:
        msg: "Warning: Failed to clone Neovim config. Please check the repository URL and your internet connection."
      when:
        - nvim_clone is defined
        - nvim_clone.skipped is not defined
        - nvim_clone.failed is defined
        - nvim_clone.failed

    - name: WASD to arrow key mapping
      pause:
        prompt: "Do you want to set up 'ALt + WASD' to arrow key mapping using keyd? (yes/no)"
      register: setup_keyd
      become: false

    - name: Set up keyd configuration
      block:
        - name: Create keyd config directory
          file:
            path: /etc/keyd
            state: directory
            mode: "0755"

        - name: Create keyd configuration file
          copy:
            dest: /etc/keyd/default.conf
            content: |
              [ids]
              *

              [main]
              # Map WASD to arrow keys when alt is pressed
              alt.w = up
              alt.s = down
              alt.a = left
              alt.d = right

              [alt]
              # This section ensures other alt combinations still work normally
              w = up
              s = down
              a = left
              d = right
            mode: "0644"

        - name: Enable and start keyd service
          systemd:
            name: keyd
            enabled: yes
            state: started
            daemon_reload: yes

        - name: Apply keyd configuration
          command: keyd reload

      when: setup_keyd.user_input | lower == 'yes'

    - name: Check if kitty is installed
      command: which kitty
      register: kitty_check
      ignore_errors: true
      changed_when: false
      become: false

    - name: Install kitty-git if not present
      become: false
      ansible.builtin.command: yay -S --noconfirm --needed kitty-git
      when: kitty_check.rc != 0
      register: kitty_install
      changed_when: kitty_install.rc == 0 and not 'nothing to do' in kitty_install.stderr

    - name: Ask if user wants to install end-4's Hyprland rice
      pause:
        prompt: |
          A new kitty terminal will open to run the installation script.
          Please wait for the installation to complete in that window.

          After the installation is complete, return here and type 'yes' to continue.
          Do you want to proceed? (yes/no)
      register: start_install
      become: false

    - name: Launch kitty with installation script
      become: false
      command: kitty -e bash -c 'bash <(curl -s "https://end-4.github.io/dots-hyprland-wiki/setup.sh")'
      when: start_install.user_input | lower == 'yes'
      async: 0
      poll: 0

    - name: Ask if installation is complete
      pause:
        prompt: "Has the installation in the kitty window completed? (yes/no)"
      register: install_complete
      become: false
      when: start_install.user_input | lower == 'yes'

    - name: Skip Hyprland installation script (already run manually)
      ansible.builtin.debug:
        msg: "Proceeding with the rest of the configuration"
      when: start_install.user_input | lower == 'yes' and install_complete.user_input | lower == 'yes'

    - name: Ask about D7OM's Hyprland and AGS configurations
      pause:
        prompt: "Do you want to install D7OM's Hyprland and AGS configurations? (yes/no)"
      register: confirm_hypr_ags
      when: start_install.user_input | lower == 'yes' and install_complete.user_input | lower == 'yes'

    - name: Handle D7OM's Hyprland and AGS configurations
      when: start_install.user_input | lower == 'yes' and
        install_complete.user_input | lower == 'yes' and
        confirm_hypr_ags.user_input | lower == 'yes'
      block:
        - name: Check existing directories
          ansible.builtin.stat:
            path: "/home/{{ remote_regular_user }}/.config/{{ item }}"
          register: config_check
          loop:
            - hypr
            - ags

        - name: Backup existing hypr directory if exists
          ansible.builtin.command:
            cmd: mv "/home/{{ remote_regular_user }}/.config/hypr" "/home/{{ remote_regular_user }}/.config/hypr.bak"
          when: config_check.results[0].stat.exists
          become: false
          register: hypr_backup

        - name: Backup existing ags directory if exists
          ansible.builtin.command:
            cmd: mv "/home/{{ remote_regular_user }}/.config/ags" "/home/{{ remote_regular_user }}/.config/ags.bak"
          when: config_check.results[1].stat.exists
          become: false
          register: ags_backup

        - name: Notify user about backups
          ansible.builtin.debug:
            msg: "Existing configuration backed up to {{ item }}"
          loop:
            - ".config/hypr.bak"
            - ".config/ags.bak"
          when:
            (item == '.config/hypr.bak' and hypr_backup is defined and hypr_backup.changed) or
            (item == '.config/ags.bak' and ags_backup is defined and ags_backup.changed)

        - name: Clone D7OM's Hyprland config
          ansible.builtin.git:
            repo: "https://github.com/d7omdev/hypr.git"
            dest: "/home/{{ remote_regular_user }}/.config/hypr"
            clone: yes
            update: yes
          become: false

        - name: Clone D7OM's AGS config
          ansible.builtin.git:
            repo: "https://github.com/d7omdev/ags.git"
            dest: "/home/{{ remote_regular_user }}/.config/ags"
            clone: yes
            update: yes
          become: false

        # - name: Ask user if they want to install the pre-shutdown script
        #   ansible.builtin.pause:
        #     prompt: |
        #       Do you want to install the pre-shutdown script? (yes/no)
        #
        #       This script will:
        #       - Notify you when the shutdown process starts
        #       - Run a Vorta backup before shutdown
        #       - Save installed packages to ~/Notes/installed.txt
        #       - Commit and push changes in your Notes Git repository
        #       - Log all actions and clear the log if it gets too large
        #       - Shutdown the system after tasks are completed
        #
        #   register: pre_shutdown_confirm
        #
        # - name: Set pre-shutdown install flag
        #   set_fact:
        #     install_pre_shutdown: "{{ pre_shutdown_confirm.user_input | trim | lower == 'yes' }}"
        #
        # - name: Run the pre-shutdown setup playbook
        #   ansible.builtin.command:
        #     cmd: "ansible-playbook /home/{{ remote_regular_user }}/.local/share/chezmoi/dot_bootstrap/pre_shutdown.yml --ask-become-pass"
        #   when: install_pre_shutdown
        - name: Ask if user wants to install Virt Manager
          pause:
            prompt: "Do you want to install and set up Virt Manager? (yes/no)"
          register: install_virt_manager

        - name: Install Virt Manager and dependencies if confirmed
          block:
            - name: Install virt-manager and related packages
              community.general.pacman:
                name:
                  - virt-manager
                  - libvirt
                  - qemu
                  - bridge-utils
                  - dnsmasq
                  - vde2
                  - openvswitch
                state: present

            - name: Enable and start libvirtd service
              systemd:
                name: libvirtd
                enabled: yes
                state: started

            - name: Add user to libvirt group
              ansible.builtin.user:
                name: "{{ remote_regular_user }}"
                groups: libvirt
                append: true

          when: install_virt_manager.user_input | lower == 'yes'
