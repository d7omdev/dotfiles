---
- name: Machine setup by D7OM
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  vars:
    flyctl_version: "0.1.130"
    pulumi_version: "v3.94.2"
    brew_packages:
      - lazygit
      - eza
      - trash-cli
      - tldr
      - thefuck
      - python
      - pipx
      - bat
      - zsh-syntax-highlighting
      - gum
      - watchman
      - golang
      - figlet
    aur_packages:
      - pika-backup
      - mission-center
      - timeshift
      - grub-btrfs
      - timeshift-autosnap
      - sesh-bin
      - github-cli
      - ttf-jetbrains-mono-nerd
      - scrcpy
      - android-tools
      - appimagelauncher
      - ttf-amiri
      - hyprshot
      - keyd
      - clipse
    install_homebrew_if_missing: true
    upgrade_homebrew_packages: true

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Install yay
      block:
        - name: Check if yay is installed
          command: which yay
          register: yay_check
          ignore_errors: true
          changed_when: false

        - name: Clone yay repo
          git:
            repo: https://aur.archlinux.org/yay.git
            dest: /tmp/yay
          when: yay_check.rc != 0
          become: false

        - name: Build and install yay
          command:
            cmd: makepkg -si --noconfirm
            chdir: /tmp/yay
          when: yay_check.rc != 0
          become: false

    - name: Install AUR packages
      become: false
      command: yay -S --noconfirm {{ item }}
      loop: "{{ aur_packages }}"

    - name: Install required packages for Arch (pacman)
      community.general.pacman:
        name:
          - git
          - btop
          - neovim
          - firefox
          - gnome-tweaks
          - ripgrep
          - zsh
          - fzf
          - tmux
          - kitty
          - openssl
          - gdbm
          - libnsl
          - luarocks
          - wl-clipboard
          - fd
          - base-devel
          - autoconf
          - docker
          - docker-compose
        state: present

    - name: Configure grub-btrfsd service
      copy:
        dest: /etc/systemd/system/grub-btrfsd.service
        content: |
          [Unit]
          Description=Regenerate grub-btrfs.cfg
          
          [Service]
          Type=simple
          LogLevelMax=notice
          Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin"
          EnvironmentFile=/etc/default/grub-btrfs/config
          ExecStart=/usr/bin/grub-btrfsd --syslog --timeshift-auto
          
          [Install]
          WantedBy=multi-user.target

    - name: Configure grub-btrfs
      blockinfile:
        path: /etc/default/grub-btrfs/config
        create: yes
        block: |
          GRUB_BTRFS_SNAPSHOT_KERNEL="/boot/vmlinuz-linux"
          GRUB_BTRFS_SNAPSHOT_INITRAMFS="/boot/initramfs-linux.img"
          GRUB_BTRFS_LIMIT="50"
          GRUB_BTRFS_SHOW_SNAPSHOTS_FOUND="true"
          GRUB_BTRFS_SHOW_TOTAL_SNAPSHOTS_FOUND="true"
          GRUB_BTRFS_SUBMENUNAME="Snapshots"
          GRUB_BTRFS_TITLE_FORMAT="timeshift-auto-snap"

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start required services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - grub-btrfsd

    - name: Check if Homebrew is already installed
      ansible.builtin.stat:
        path: /home/linuxbrew/.linuxbrew/bin/brew
      register: homebrew_exists

    - name: Install Homebrew
      block:
        - name: Download Homebrew install script
          get_url:
            url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
            dest: /tmp/brew_install.sh
            mode: '0755'
          become: false

        - name: Install Homebrew
          command: /bin/bash /tmp/brew_install.sh
          become: false
          when: not homebrew_exists.stat.exists

        - name: Add Homebrew to PATH in .zshrc
          lineinfile:
            path: "/home/{{ remote_regular_user }}/.zshrc"
            line: 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
            create: yes
          become: false

    - name: Upgrade Homebrew packages
      command: /home/linuxbrew/.linuxbrew/bin/brew upgrade
      become: false
      when: homebrew_exists.stat.exists and upgrade_homebrew_packages

    - name: Install packages via Homebrew
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ brew_packages }}"
      become: false

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        groups: docker
        append: true

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: Check if ~/.config/nvim exists
      stat:
        path: "/home/{{ remote_regular_user }}/.config/nvim"
      register: nvim_config_check

    - name: Ask if the user wants to install D7OM's Neovim config
      pause:
        prompt: "Do you want to install D7OM's Neovim config? (yes/no)"
      register: confirm_install
      when: nvim_config_check.stat.exists

    - name: Backup existing nvim config if confirmed
      command: mv "/home/{{ remote_regular_user }}/.config/nvim" "/home/{{ remote_regular_user }}/.config/nvim.bak"
      when:
        - nvim_config_check.stat.exists
        - confirm_install.user_input == "yes"

    - name: Clone Neovim config from GitHub
      git:
        repo: "https://github.com/abdulrahmanDev1/nvim.git"
        dest: "/home/{{ remote_regular_user }}/.config/nvim"
        clone: yes
        update: yes
      become: false
      when:
        - not nvim_config_check.stat.exists or confirm_install.user_input == "yes"

    - name: WASD to arrow key mapping
      pause:
        prompt: "Do you want to set up 'ALt + WASD' to arrow key mapping using keyd? (yes/no)"
      register: setup_keyd
      become: false

    - name: Set up keyd configuration
      block:
        - name: Create keyd config directory
          file:
            path: /etc/keyd
            state: directory
            mode: '0755'

        - name: Create keyd configuration file
          copy:
            dest: /etc/keyd/default.conf
            content: |
              [ids]
              *

              [main]
              # Map WASD to arrow keys when alt is pressed
              alt.w = up
              alt.s = down
              alt.a = left
              alt.d = right

              [alt]
              # This section ensures other alt combinations still work normally
              w = up
              s = down
              a = left
              d = right
            mode: '0644'

        - name: Enable and start keyd service
          systemd:
            name: keyd
            enabled: yes
            state: started
            daemon_reload: yes

        - name: Apply keyd configuration
          command: keyd reload
          
      when: setup_keyd.user_input | lower == 'yes'
